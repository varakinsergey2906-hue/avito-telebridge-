import express from "express";
import fetch from "node-fetch";

const app = express();
app.use(express.json());

// –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ Render ‚Üí Environment
const {
  PORT = 8080,
  TELEGRAM_BOT_TOKEN,
  TELEGRAM_CHAT_ID,
  WEBHOOK_SHARED_SECRET,
  AVITO_CLIENT_ID,
  AVITO_CLIENT_SECRET
} = process.env;

// ----- –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram -----
async function tg(text) {
  if (!TELEGRAM_BOT_TOKEN || !TELEGRAM_CHAT_ID) return;
  const r = await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
    method: "POST",
    headers: {"Content-Type": "application/json"},
    body: JSON.stringify({ chat_id: TELEGRAM_CHAT_ID, text, parse_mode: "HTML" })
  });
  return r.ok;
}

// healthcheck
app.get("/", (_, res) => res.send("ok"));

// —Ä—É—á–Ω–æ–π –ø–∏–Ω–≥ (–ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–ª–µ–≥–∏)
app.get("/ping", async (req, res) => {
  try {
    await tg(String(req.query.text || "–ü–∏–Ω–≥ ‚úÖ"));
    res.send("sent");
  } catch (e) {
    res.status(500).send("error");
  }
});

// !!! –¢–í–û–ô –í–ï–ë–•–£–ö –û–¢ AVITO (–ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–π)
app.post("/webhook/message", async (req, res) => {
  // –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–∫—Ä–µ—Ç–∞
  if (WEBHOOK_SHARED_SECRET && req.headers["x-webhook-signature"] !== WEBHOOK_SHARED_SECRET) {
    return res.status(401).send("bad signature");
  }

  const ev = req.body || {};
  const title = ev?.context?.value?.title || ev?.ad_title || "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è";
  const text  = ev?.message?.text || ev?.text || "(–±–µ–∑ —Ç–µ–∫—Å—Ç–∞)";
  const chatId = ev?.chat_id || "–Ω–µ—Ç chat_id";
  const userId = ev?.user_id || ev?.user?.id || "–Ω–µ—Ç user_id";

  const msg = [
    "üü¢ <b>–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b>",
    `–û–±—ä—è–≤–ª–µ–Ω–∏–µ: <i>${title}</i>`,
    `chat_id: <code>${chatId}</code>  user_id: <code>${userId}</code>`,
    "‚Äî ‚Äî ‚Äî",
    text
  ].join("\n");

  try { await tg(msg.slice(0, 4000)); } catch {}
  res.send("ok");
});

// ====== –°–ï–†–í–ò–°–ù–ê–Ø –°–°–´–õ–ö–ê –î–õ–Ø –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò –í–ï–ë–•–£–ö–ê –í AVITO ======
async function getAvitoAccessToken() {
  if (!AVITO_CLIENT_ID || !AVITO_CLIENT_SECRET) throw new Error("No Avito creds");
  const body = new URLSearchParams({
    grant_type: "client_credentials",
    client_id: AVITO_CLIENT_ID,
    client_secret: AVITO_CLIENT_SECRET
  });
  const r = await fetch("https://api.avito.ru/token", { method: "POST", body });
  if (!r.ok) throw new Error(`Avito token failed: ${r.status}`);
  const j = await r.json();
  if (!j.access_token) throw new Error("No access_token");
  return j.access_token;
}

// –æ—Ç–∫—Ä–æ–µ—à—å —ç—Ç—É —Å—Å—ã–ª–∫—É –æ–¥–∏–Ω —Ä–∞–∑: –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º URL –≤–µ–±—Ö—É–∫–∞ –≤ –ê–≤–∏—Ç–æ
app.get("/setup/register", async (req, res) => {
  try {
    const access = await getAvitoAccessToken();
    const webhookUrl = `https://${req.headers.host}/webhook/message`;

    // –í–∞–∂–Ω–æ: —ç–Ω–¥–ø–æ–∏–Ω—Ç –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è —É –ê–≤–∏—Ç–æ. –£ –º–Ω–æ–≥–∏—Ö —ç—Ç–æ messenger/v1/webhook.
    // –ï—Å–ª–∏ –≤–µ—Ä–Ω—ë—Ç 404/403 ‚Äî –ø—Ä–∏—à–ª–∏ —Ç–µ–∫—Å—Ç –∏–∑ –ª–æ–≥–æ–≤ Render, —è –ø–æ–ø—Ä–∞–≤–ª—é –ø—É—Ç—å/–ø—Ä–∞–≤–∞.
    const r = await fetch("https://api.avito.ru/messenger/v1/webhook", {
      method: "POST",
      headers: {
        "Authorization": `Bearer ${access}`,
        "Content-Type": "application/json"
      },
      body: JSON.stringify({ url: webhookUrl })
    });

    const text = await r.text();
    await tg(`‚öôÔ∏è –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤–µ–±—Ö—É–∫–∞: ${r.status}\n${text}`);
    res.status(200).send(`Webhook register status: ${r.status} ‚Äî —Å–º–æ—Ç—Ä–∏ Telegram –∏ –ª–æ–≥–∏.`);
  } catch (e) {
    await tg(`‚ùóÔ∏è–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–µ–±—Ö—É–∫–∞: ${e.message}`);
    res.status(500).send(e.message);
  }
});

app.listen(PORT, () => console.log("Listening on", PORT));
