import express from "express";
import fetch from "node-fetch";

const app = express();
app.use(express.json());

// ===== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ =====
const TELEGRAM_TOKEN = process.env.TELEGRAM_TOKEN;
const TELEGRAM_CHAT_ID = process.env.TELEGRAM_CHAT_ID;
const AVITO_CLIENT_ID = process.env.AVITO_CLIENT_ID;
const AVITO_CLIENT_SECRET = process.env.AVITO_CLIENT_SECRET;

// ===== –ü–∞–º—è—Ç—å –¥–ª—è –∞–Ω—Ç–∏–¥—É–±–ª–µ–π —Å–æ–æ–±—â–µ–Ω–∏–π =====
const processedMessages = new Set();
function isDuplicate(messageId) {
  if (!messageId) return false;
  if (processedMessages.has(messageId)) return true;
  processedMessages.add(messageId);
  if (processedMessages.size > 1000) processedMessages.clear();
  return false;
}

// ===== –ü–∞–º—è—Ç—å –¥–ª—è –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–æ–≤ (—á—Ç–æ–±—ã —Å–ª–∞—Ç—å 1 —Ä–∞–∑ –Ω–∞ —á–∞—Ç –≤ 12 —á) =====
const repliedChats = new Map(); // chat_id -> expiresAt
const REPLY_TTL_MS = 12 * 60 * 60 * 1000; // 12 —á–∞—Å–æ–≤

function shouldAutoReply(chatId) {
  const now = Date.now();
  // –ß–∏—Å—Ç–∏–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∑–∞–ø–∏—Å–∏
  for (const [k, exp] of repliedChats) {
    if (exp < now) repliedChats.delete(k);
  }
  if (!chatId) return false;
  if (repliedChats.has(chatId)) return false; // —É–∂–µ –æ—Ç–≤–µ—á–∞–ª–∏
  repliedChats.set(chatId, now + REPLY_TTL_MS);
  return true;
}

// ===== –£—Ç–∏–ª–∏—Ç—ã =====
async function tg(text) {
  return fetch(`https://api.telegram.org/bot${TELEGRAM_TOKEN}/sendMessage`, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ chat_id: TELEGRAM_CHAT_ID, text })
  });
}

async function getAvitoAccessToken() {
  const r = await fetch("https://api.avito.ru/token", {
    method: "POST",
    headers: { "Content-Type": "application/x-www-form-urlencoded" },
    body: `client_id=${AVITO_CLIENT_ID}&client_secret=${AVITO_CLIENT_SECRET}&grant_type=client_credentials`
  });
  const j = await r.json();
  return j.access_token;
}

// ===== –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π =====
app.post("/webhook/message", async (req, res) => {
  res.sendStatus(200);

  const raw = req.body;
  const msg = raw?.payload?.value;
  const messageId = msg?.id;

  if (isDuplicate(messageId)) return;

  const chatId = msg?.chat_id;
  const userId = msg?.user_id;
  const text = msg?.content?.text || "(–±–µ–∑ —Ç–µ–∫—Å—Ç–∞)";
  const itemId = msg?.item_id;

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
  await tg(
    `üì¶ RAW:\n${JSON.stringify(raw, null, 2)}\n\n` +
    `–°–æ–±–µ—Å–µ–¥–Ω–∏–∫: ${text}\n\n` +
    `–û–±—ä—è–≤–ª–µ–Ω–∏–µ #${itemId} (${itemId ? `https://avito.ru/${itemId}` : ""}) [#adv${itemId}]\n` +
    `–°–æ–±–µ—Å–µ–¥–Ω–∏–∫: [#user${userId}]\n\n` +
    `${msg?.chat_type}:${chatId}`
  );

  // ===== –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç =====
  if (shouldAutoReply(chatId)) {
    const autoReply = [
      "–ü—Ä–∏–≤–µ—Ç! –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ üëã",
      "–û—Ç–≤–µ—á—É –≤ —Ç–µ—á–µ–Ω–∏–µ 10‚Äì30 –º–∏–Ω—É—Ç. –ï—Å–ª–∏ —Å—Ä–æ—á–Ω–æ ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ –≤ Telegram: @your_username.",
      "–ö–æ–≥–¥–∞ —É–¥–æ–±–Ω–æ —Å–æ–∑–≤–æ–Ω–∏—Ç—å—Å—è?"
    ].join("\n");

    try {
      const access = await getAvitoAccessToken();

      const bodies = [
        { chat_id: chatId, user_id: userId, type: "text", message: { content: { text: autoReply } } },
        { chat_id: chatId, user_id: userId, message: { content: { text: autoReply } } },
        { chat_id: chatId, user_id: userId, message: { text: autoReply } }
      ];

      const urls = [
        "https://api.avito.ru/messenger/v3/messages",
        "https://api.avito.ru/messenger/v3/messages/send",
        `https://api.avito.ru/messenger/v3/chats/${encodeURIComponent(chatId)}/messages`,
        "https://api.avito.ru/messenger/v2/messages",
        "https://api.avito.ru/messenger/v1/messages",
        "https://api.avito.ru/messenger/messages"
      ];

      let sent = false, debug = [];
      outer: for (const url of urls) {
        for (const body of bodies) {
          const r = await fetch(url, {
            method: "POST",
            headers: {
              "Authorization": `Bearer ${access}`,
              "Content-Type": "application/json"
            },
            body: JSON.stringify(body)
          });
          const t = await r.text();
          debug.push(`${r.status} ‚Äî ${url}\n${t.slice(0,200)}\nBODY=${JSON.stringify(body)}`);
          if ([200,201,202,204].includes(r.status)) { sent = true; break outer; }
          try { const j = JSON.parse(t); if (j && j.ok === true) { sent = true; break outer; } } catch {}
        }
      }

      await tg(`‚Ü©Ô∏è –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç: ${sent ? "—É—Å–ø–µ—Ö" : "–Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω"}\n` + debug.join("\n\n"));
    } catch (e) {
      await tg(`‚ùóÔ∏è–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–∞: ${e.message}`);
    }
  }
});

// ===== –°—Ç–∞—Ä—Ç —Å–µ—Ä–≤–µ—Ä–∞ =====
app.get("/", (_, res) => res.send("OK"));
app.listen(10000, () => console.log("Server started"));
