import express from "express";
import fetch from "node-fetch";

const app = express();
app.use(express.json());

// ========= ENV (–ù–ï –ú–ï–ù–Ø–ï–ú –ò–ú–ï–ù–ê!) =========
const {
  PORT = 8080,
  TELEGRAM_BOT_TOKEN,
  TELEGRAM_CHAT_ID,
  WEBHOOK_SHARED_SECRET,   // –æ—Å—Ç–∞–≤—å –ø—É—Å—Ç—ã–º, –µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å—å –Ω–µ —à–ª—é—Ç
  AVITO_CLIENT_ID,
  AVITO_CLIENT_SECRET,
  DEBUG_RAW = "0"          // "1" —á—Ç–æ–±—ã –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Å—ã—Ä—ã–µ JSON –≤ TG
} = process.env;

// ========= –∞–Ω—Ç–∏-–¥—É–±–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–π =========
const seen = new Map(); // messageId -> expiresAt
const TTL_MS = 10 * 60 * 1000; // 10 –º–∏–Ω—É—Ç
function seenOnce(id) {
  const now = Date.now();
  for (const [k, exp] of seen) if (exp < now) seen.delete(k);
  if (!id) return false;
  if (seen.has(id)) return true;
  seen.set(id, now + TTL_MS);
  return false;
}

// ========= –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç —Ç–æ–ª—å–∫–æ 1 —Ä–∞–∑ –Ω–∞ —á–∞—Ç / 12 —á–∞—Å–æ–≤ =========
const repliedChats = new Map(); // chat_id -> expiresAt
const REPLY_TTL_MS = 12 * 60 * 60 * 1000;
function shouldAutoReply(chatId) {
  const now = Date.now();
  for (const [k, exp] of repliedChats) if (exp < now) repliedChats.delete(k);
  if (!chatId) return false;
  if (repliedChats.has(chatId)) return false;
  repliedChats.set(chatId, now + REPLY_TTL_MS);
  return true;
}

// ========= helpers =========
async function tg(text) {
  if (!TELEGRAM_BOT_TOKEN || !TELEGRAM_CHAT_ID) return;
  await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
    method: "POST",
    headers: {"Content-Type": "application/json"},
    body: JSON.stringify({ chat_id: TELEGRAM_CHAT_ID, text })
  });
}

function tsRuFromISO(iso) {
  const d = iso ? new Date(iso) : new Date();
  const pad = n => String(n).padStart(2, "0");
  return `${pad(d.getDate())}.${pad(d.getMonth()+1)} ${pad(d.getHours())}:${pad(d.getMinutes())}`;
}

// ========= health / ping =========
app.get("/", (_, res) => res.send("ok"));

app.get("/ping", async (req, res) => {
  try {
    await tg(String(req.query.text || "–ü–∏–Ω–≥ ‚úÖ"));
    res.send("sent");
  } catch {
    res.status(500).send("error");
  }
});

// ========= Avito OAuth (client_credentials) =========
async function getAvitoAccessToken() {
  if (!AVITO_CLIENT_ID || !AVITO_CLIENT_SECRET) throw new Error("No Avito creds");
  const body = new URLSearchParams({
    grant_type: "client_credentials",
    client_id: AVITO_CLIENT_ID,
    client_secret: AVITO_CLIENT_SECRET
  });
  const r = await fetch("https://api.avito.ru/token", { method: "POST", body });
  if (!r.ok) throw new Error(`Avito token failed: ${r.status}`);
  const j = await r.json();
  if (!j.access_token) throw new Error("No access_token");
  return j.access_token;
}

// ========= —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤–µ–±—Ö—É–∫–∞ –∫–Ω–æ–ø–∫–æ–π =========
app.get("/setup/register", async (req, res) => {
  try {
    const access = await getAvitoAccessToken();
    const webhookUrl = `https://${req.headers.host}/webhook/message`;

    const candidates = [
      "https://api.avito.ru/messenger/v3/webhook",
      "https://api.avito.ru/messenger/v2/webhook",
      "https://api.avito.ru/messenger/v1/webhooks",
      "https://api.avito.ru/messenger/v1/webhook"
    ];

    const results = [];
    for (const url of candidates) {
      try {
        const r = await fetch(url, {
          method: "POST",
          headers: {
            "Authorization": `Bearer ${access}`,
            "Content-Type": "application/json"
          },
          body: JSON.stringify({ url: webhookUrl })
        });
        const text = await r.text();
        results.push({ url, status: r.status, text });
        if ([200,201,204].includes(r.status)) break;
      } catch (e) {
        results.push({ url, status: "ERR", text: e.message });
      }
    }

    const summary = results.map(x => `${x.status} ‚Äî ${x.url}\n${(x.text||"").slice(0,200)}`).join("\n\n");
    await tg(`‚öôÔ∏è –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤–µ–±—Ö—É–∫–∞:\n${summary}`);
    res.status(200).send(`–ì–æ—Ç–æ–≤–æ. –°–º–æ—Ç—Ä–∏ Telegram.\n\n${summary}`);
  } catch (e) {
    await tg(`‚ùóÔ∏è–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–µ–±—Ö—É–∫–∞: ${e.message}`);
    res.status(500).send(e.message);
  }
});

// ========= –æ—Å–Ω–æ–≤–Ω–æ–π –≤–µ–±—Ö—É–∫ (v3 payload) =========
app.post("/webhook/message", async (req, res) => {
  try {
    // –µ—Å–ª–∏ –≤–∫–ª—é—á–∞–ª —Å–µ–∫—Ä–µ—Ç ‚Äî –ø—Ä–æ–≤–µ—Ä—è–µ–º, –∏–Ω–∞—á–µ –æ—Å—Ç–∞–≤—å ENV –ø—É—Å—Ç—ã–º
    if (WEBHOOK_SHARED_SECRET && req.headers["x-webhook-signature"] !== WEBHOOK_SHARED_SECRET) {
      return res.status(401).send("bad signature");
    }

    const ev = req.body || {};
    const v  = ev?.payload?.value || {}; // v3-—Å—Ö–µ–º–∞

    // –∞–Ω—Ç–∏-–¥—É–±–ª—å –ø–æ id —Å–æ–æ–±—â–µ–Ω–∏—è
    const messageId = v?.id || ev?.id;
    if (seenOnce(messageId)) return res.send("dup");

    if (DEBUG_RAW === "1") {
      try { await tg("üì¶ RAW:\n" + JSON.stringify(ev, null, 2).slice(0, 3500)); } catch {}
    }

    const text      = v?.content?.text || "(–±–µ–∑ —Ç–µ–∫—Å—Ç–∞)";
    const chatId    = v?.chat_id || "";
    const chatType  = v?.chat_type || "";
    const userId    = v?.user_id || "";
    const itemId    = v?.item_id || "";
    const published = v?.published_at || null;

    const myName    = "";           // –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –≤–ø–∏—à–∏ —Å–≤–æ—ë –∏–º—è
    const userName  = "–°–æ–±–µ—Å–µ–¥–Ω–∏–∫";

    // –∫–∞—Ä—Ç–æ—á–∫–∞ –≤ –¢–ì (–∫–∞–∫ –ø—Ä–æ—Å–∏–ª)
    const lines = [];
    lines.push(`${userName}: ${text}`);
    lines.push("");
    lines.push("–ò–°–¢–û–†–ò–Ø");
    const ts = tsRuFromISO(published);
    lines.push(`${ts} ${myName}: `);
    lines.push(`${ts} ${userName}: ${text}`);
    lines.push("");
    const advTitle = itemId ? `–û–±—ä—è–≤–ª–µ–Ω–∏–µ #${itemId}` : "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è";
    const advUrl   = itemId ? `https://avito.ru/${itemId}` : "";
    const urlPart  = advUrl ? ` (${advUrl})` : "";
    lines.push(`${advTitle}${urlPart}  [#adv${itemId || ""}]`);
    if (myName) lines.push(`–ê–∫–∫–∞—É–Ω—Ç: ${myName}`);
    lines.push(`–°–æ–±–µ—Å–µ–¥–Ω–∏–∫: ${userName} [#user${userId || ""}]`);
    lines.push("");
    lines.push(`${chatType ? chatType + ":" : ""}${chatId || "–Ω–µ—Ç chat_id"}`);
    await tg(lines.join("\n"));

    // ===== –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç (1 —Ä–∞–∑ –Ω–∞ —á–∞—Ç / 12—á) =====
    if (shouldAutoReply(chatId)) {
      const autoReply = [
        "–ü—Ä–∏–≤–µ—Ç! –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ üëã",
        "–û—Ç–≤–µ—á—É –≤ —Ç–µ—á–µ–Ω–∏–µ 10‚Äì30 –º–∏–Ω—É—Ç. –ï—Å–ª–∏ —Å—Ä–æ—á–Ω–æ ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ –≤ Telegram: @your_username.",
        "–ö–æ–≥–¥–∞ —É–¥–æ–±–Ω–æ —Å–æ–∑–≤–æ–Ω–∏—Ç—å—Å—è?"
      ].join("\n");

      try {
        const access = await getAvitoAccessToken();

        // –ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã/–ø—É—Ç–∏
        const bodies = [
          { chat_id: chatId, user_id: userId, type: "text", message: { content: { text: autoReply } } }, // v3
          { chat_id: chatId, user_id: userId, message: { content: { text: autoReply } } },               // v2/v1
          { chat_id: chatId, user_id: userId, message: { text: autoReply } }                              // —É–ø—Ä–æ—â—ë–Ω–Ω—ã–π
        ];

        const urls = [
          "https://api.avito.ru/messenger/v3/messages",
          "https://api.avito.ru/messenger/v3/messages/send",
          "https://api.avito.ru/messenger/v3/chats/messages",
          `https://api.avito.ru/messenger/v3/chats/${encodeURIComponent(chatId)}/messages`,
          "https://api.avito.ru/messenger/v2/messages",
          "https://api.avito.ru/messenger/v1/messages",
          "https://api.avito.ru/messenger/messages"
        ];

        let sent = false, debug = [];
        outer: for (const url of urls) {
          for (const body of bodies) {
            const r = await fetch(url, {
              method: "POST",
              headers: {
                "Authorization": `Bearer ${access}`,
                "Content-Type": "application/json"
              },
              body: JSON.stringify(body)
            });
            const t = await r.text();
            debug.push(`${r.status} ‚Äî ${url}\n${t.slice(0,200)}\nBODY=${JSON.stringify(body)}`);
            if ([200,201,202,204].includes(r.status)) { sent = true; break outer; }
            try { const j = JSON.parse(t); if (j && j.ok === true) { sent = true; break outer; } } catch {}
          }
        }

        await tg(`‚Ü©Ô∏è –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç: ${sent ? "—É—Å–ø–µ—Ö" : "–Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω"}\n` + debug.join("\n\n"));
      } catch (e) {
        await tg(`‚ùóÔ∏è–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–∞: ${e.message}`);
      }
    }

    res.send("ok");
  } catch (e) {
    await tg(`‚ùóÔ∏è–û—à–∏–±–∫–∞ –≤–µ–±—Ö—É–∫–∞: ${e.message}`);
    res.status(200).send("ok");
  }
});

// ========= —Å—Ç–∞—Ä—Ç =========
app.listen(PORT, () => console.log("Listening on", PORT));
