import express from "express";
import fetch from "node-fetch";

const app = express();
app.use(express.json());

// ===== ENV =====
const {
  PORT = 8080,
  TELEGRAM_BOT_TOKEN,
  TELEGRAM_CHAT_ID,
  // –¥–ª—è –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–∞:
  AVITO_CLIENT_ID,
  AVITO_CLIENT_SECRET,
  AVITO_ACCOUNT_ID,        // —Ç–≤–æ–π ID –ø—Ä–æ—Ñ–∏–ª—è (—É —Ç–µ–±—è 296724426)
  DEBUG_RAW = "0",         // 1 ‚Äî —Å–ª–∞—Ç—å —Å—ã—Ä—ã–µ JSON –≤ TG (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
  FORCE_REPLY = "0"        // 1 ‚Äî –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –ö–ê–ñ–î–û–ï –≤—Ö–æ–¥—è—â–µ–µ (–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç)
} = process.env;

// ===== helpers =====
async function tg(text) {
  if (!TELEGRAM_BOT_TOKEN || !TELEGRAM_CHAT_ID) return;
  await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
    method: "POST",
    headers: {"Content-Type": "application/json"},
    body: JSON.stringify({ chat_id: TELEGRAM_CHAT_ID, text })
  });
}

function tsRuFromISO(iso) {
  const d = iso ? new Date(iso) : new Date();
  const pad = n => String(n).padStart(2, "0");
  return `${pad(d.getDate())}.${pad(d.getMonth()+1)} ${pad(d.getHours())}:${pad(d.getMinutes())}`;
}

async function getAvitoAccessToken() {
  const body = new URLSearchParams({
    grant_type: "client_credentials",
    client_id: AVITO_CLIENT_ID,
    client_secret: AVITO_CLIENT_SECRET
  });
  const r = await fetch("https://api.avito.ru/token", { method: "POST", body });
  if (!r.ok) throw new Error(`Avito token failed: ${r.status}`);
  const j = await r.json();
  if (!j.access_token) throw new Error("No access_token");
  return j.access_token;
}

// –µ—Å–ª–∏ AVITO_ACCOUNT_ID –Ω–µ —É–∫–∞–∑–∞–Ω ‚Äî –ø–æ–ª—É—á–∏–º —Å–∞–º–∏ (–æ–¥–∏–Ω —Ä–∞–∑)
let cachedAccountId = AVITO_ACCOUNT_ID || null;
async function ensureAccountId(token) {
  if (cachedAccountId) return cachedAccountId;
  const r = await fetch("https://api.avito.ru/core/v1/accounts/self", {
    headers: { Authorization: `Bearer ${token}` }
  });
  if (!r.ok) throw new Error(`Get self failed: ${r.status}`);
  const j = await r.json();
  cachedAccountId = String(j?.id || "");
  if (!cachedAccountId) throw new Error("No account_id");
  return cachedAccountId;
}

// ===== –∞–Ω—Ç–∏-–¥—É–±–ª–∏ –∏ –ª–∏–º–∏—Ç –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–∞ =====
const seen = new Map();              // messageId -> expiresAt (10 –º–∏–Ω)
const MSG_TTL_MS = 10 * 60 * 1000;
function seenOnce(id) {
  const now = Date.now();
  for (const [k, exp] of seen) if (exp < now) seen.delete(k);
  if (!id) return false;
  if (seen.has(id)) return true;
  seen.set(id, now + MSG_TTL_MS);
  return false;
}

const repliedChats = new Map();      // chat_id -> expiresAt (12 —á–∞—Å–æ–≤)
const REPLY_TTL_MS = 12 * 60 * 60 * 1000;
function shouldAutoReply(chatId) {
  const now = Date.now();
  for (const [k, exp] of repliedChats) if (exp < now) repliedChats.delete(k);
  if (!chatId) return false;
  if (repliedChats.has(chatId)) return false;
  repliedChats.set(chatId, now + REPLY_TTL_MS);
  return true;
}

// ===== health / ping =====
app.get("/", (_, res) => res.send("ok"));
app.get("/ping", async (req, res) => {
  try { await tg(String(req.query.text || "–ü–∏–Ω–≥ ‚úÖ")); res.send("sent"); }
  catch { res.status(500).send("error"); }
});

// ===== –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç: –æ—Ç–ø—Ä–∞–≤–∫–∞ (v3, –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç) =====
async function sendAutoReply({ chatId, text }) {
  const access = await getAvitoAccessToken();
  const accountId = await ensureAccountId(access);

  const base = `https://api.avito.ru/messenger/v3/accounts/${encodeURIComponent(accountId)}/chats/${encodeURIComponent(chatId)}`;

  const urls = [
    `${base}/messages`,
    `${base}/messages/text`,
    `${base}/messages:send`
  ];

  const bodies = [
    { type: "text", content: { text } },            // A
    { message: { content: { text } } },             // B
    { text }                                        // C
  ];

  let sent = false, log = [];
  outer: for (const url of urls) {
    for (const body of bodies) {
      const r = await fetch(url, {
        method: "POST",
        headers: {
          "Authorization": `Bearer ${access}`,
          "Content-Type": "application/json",
          "Accept": "application/json"
        },
        body: JSON.stringify(body)
      });
      const t = await r.text();
      log.push(`${r.status} ‚Äî ${url}\n${t.slice(0,300)}\nBODY=${JSON.stringify(body)}`);
      if ([200,201,202,204].includes(r.status)) { sent = true; break outer; }
    }
  }
  await tg(`‚Ü©Ô∏è –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç: ${sent ? "—É—Å–ø–µ—Ö" : "–Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω"}\n` + log.join("\n\n"));
  return sent;
}

// ===== –µ–¥–∏–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–∞ =====
async function handleWebhook(req, res) {
  try {
    const ev = req.body || {};
    const v  = ev?.payload?.value || {}; // v3

    // –∞–Ω—Ç–∏-–¥—É–±–ª—å: –∏–Ω–æ–≥–¥–∞ –ê–≤–∏—Ç–æ —Ä–µ—Ç—Ä–∞–∏—Ç –æ–¥–Ω–æ –∏ —Ç–æ –∂–µ
    const messageId = v?.id || ev?.id;
    if (seenOnce(messageId)) return res.send("dup");

    if (DEBUG_RAW === "1") {
      try { await tg("üì¶ RAW:\n" + JSON.stringify(ev, null, 2).slice(0, 3500)); } catch {}
    }

    const text       = v?.content?.text || "(–±–µ–∑ —Ç–µ–∫—Å—Ç–∞)";
    const chatId     = v?.chat_id || "";
    const chatType   = v?.chat_type || "";
    const userId     = v?.user_id || "";      // —Ç–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç
    const authorId   = v?.author_id || "";    // –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å (–∫–ª–∏–µ–Ω—Ç)
    const itemId     = v?.item_id || "";
    const published  = v?.published_at || null;

    // –∫–∞—Ä—Ç–æ—á–∫–∞ –≤ TG (–∫–∞–∫ —Ä–∞–Ω—å—à–µ)
    const lines = [];
    const ts = tsRuFromISO(published);
    lines.push(`–°–æ–±–µ—Å–µ–¥–Ω–∏–∫: ${text}`);
    lines.push("");
    lines.push("–ò–°–¢–û–†–ò–Ø");
    lines.push(`${ts} –Ø: `);
    lines.push(`${ts} –°–æ–±–µ—Å–µ–¥–Ω–∏–∫: ${text}`);
    lines.push("");
    const advTitle = itemId ? `–û–±—ä—è–≤–ª–µ–Ω–∏–µ #${itemId}` : "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è";
    const advUrl   = itemId ? `https://avito.ru/${itemId}` : "";
    lines.push(`${advTitle}${advUrl ? ` (${advUrl})` : ""}  [#adv${itemId || ""}]`);
    lines.push(`–°–æ–±–µ—Å–µ–¥–Ω–∏–∫: [#user${userId || ""}]`);
    lines.push("");
    lines.push(`${chatType ? chatType + ":" : ""}${chatId || "–Ω–µ—Ç chat_id"}`);
    await tg(lines.join("\n"));

    // === –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç (–∞–∫–∫—É—Ä–∞—Ç–Ω–æ) ===
    // —à–ª—ë–º –¢–û–õ–¨–ö–û –µ—Å–ª–∏ —ç—Ç–æ –Ω–∞–ø–∏—Å–∞–ª –∫–ª–∏–µ–Ω—Ç (author_id != user_id),
    // –∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π —Ä–∞–∑ –∑–∞ 12 —á–∞—Å–æ–≤, –ª–∏–±–æ –≤–∫–ª—é—á—ë–Ω FORCE_REPLY
    const force = FORCE_REPLY === "1";
    const isFromClient = authorId && userId && authorId !== userId;

    if (!chatId) {
      await tg("‚Ü©Ô∏è –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω: –Ω–µ—Ç chat_id");
    } else if (!isFromClient) {
      await tg("‚Ü©Ô∏è –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω: —ç—Ç–æ –Ω–µ –∫–ª–∏–µ–Ω—Ç (author_id == user_id)");
    } else if (!(force || shouldAutoReply(chatId))) {
      await tg("‚Ü©Ô∏è –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω: —É–∂–µ –æ—Ç–≤–µ—á–∞–ª–∏ –≤ —ç—Ç–æ—Ç —á–∞—Ç –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 12 —á–∞—Å–æ–≤");
    } else if (!AVITO_CLIENT_ID || !AVITO_CLIENT_SECRET) {
      await tg("‚Ü©Ô∏è –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω: –Ω–µ—Ç AVITO_CLIENT_ID/SECRET");
    } else {
      const replyText =
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n" +
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ç–µ—Ä–µ—Å –∫ –º–æ–∏–º –∑–∞–Ω—è—Ç–∏—è–º –ø–æ —Ö–∏–º–∏–∏. –ß—Ç–æ–±—ã –±—ã—Å—Ç—Ä–µ–µ –æ–±—Å—É–¥–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∏ –ø–æ–¥–æ–±—Ä–∞—Ç—å —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –ø—Ä–æ–±–Ω–æ–≥–æ —É—Ä–æ–∫–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –≤ Telegram @varakin_s –∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä WhatsApp ‚Äî —è —Å–≤—è–∂—É—Å—å —Å –≤–∞–º–∏ —Å—Ä–∞–∑—É –∫–∞–∫ —Å–º–æ–≥—É.\n\n" +
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª—å: –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –ï–ì–≠/–û–ì–≠, –ø–æ–º–æ—â—å —Å —É—á–µ–±–æ–π, –æ–ª–∏–º–ø–∏–∞–¥–Ω–∞—è —Ö–∏–º–∏—è –∏–ª–∏ —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ. –ñ–¥—É –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è!";

      try { await sendAutoReply({ chatId, text: replyText }); }
      catch (e) { await tg(`‚Ü©Ô∏è –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç –æ—à–∏–±–∫–∞: ${e.message}`); }
    }

    res.send("ok");
  } catch (e) {
    await tg(`‚ùóÔ∏è–û—à–∏–±–∫–∞ –≤–µ–±—Ö—É–∫–∞: ${e.message}`);
    res.status(200).send("ok");
  }
}

// –õ–æ–≤–∏–º –æ–±–∞ –ø—É—Ç–∏ ‚Äî —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–º–∞—Ö–Ω—É—Ç—å—Å—è
app.post("/webhook", handleWebhook);
app.post("/webhook/message", handleWebhook);

// —Å—Ç–∞—Ä—Ç
app.listen(PORT, () => console.log(`Listening on ${PORT}`));
